/*
I have to confess that I didn't build an efficient program at the beginning,
since during the submission, both runtime and memory only beat no more than
6% of the submissions...
This better method is generated by AI, and is much better than mine...
*/

#include <vector>
#include <string>

class Solution {
public:
    std::string convert(std::string s, int numRows) {
        // Handle the edge case of 1 row immediately
        if (numRows == 1 || s.length() <= numRows) {
            return s;
        }

        // 1. Create one vector for EACH row, to hold the chars.
        std::vector<std::string> rows(numRows);
        int current_row = 0;
        bool going_down = false; // Start by going down

        // 2. FILLING PHASE: Place characters into the correct row-string.
        for (char c : s) {
            rows[current_row].push_back(c);

            // Change direction when hitting the top or bottom row
            if (current_row == 0 || current_row == numRows - 1) {
                going_down = !going_down;
            }

            // Move to the next row
            if (going_down) {
                current_row++;
            } else {
                current_row--;
            }
        }

        // 3. READING PHASE: Concatenate the row-strings to get the result.
        std::string result;
        for (const std::string& row : rows) {
            result += row;
        }

        return result;
    }
};
